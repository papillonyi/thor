// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	One                  int32    `protobuf:"varint,1,opt,name=one" json:"one,omitempty"`
	Two                  int32    `protobuf:"varint,2,opt,name=two" json:"two,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_9f4f7f8f14d9fd6f, []int{0}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (dst *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(dst, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetOne() int32 {
	if m != nil {
		return m.One
	}
	return 0
}

func (m *Point) GetTwo() int32 {
	if m != nil {
		return m.Two
	}
	return 0
}

type Sum struct {
	Sum                  int32    `protobuf:"varint,1,opt,name=sum" json:"sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sum) Reset()         { *m = Sum{} }
func (m *Sum) String() string { return proto.CompactTextString(m) }
func (*Sum) ProtoMessage()    {}
func (*Sum) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_9f4f7f8f14d9fd6f, []int{1}
}
func (m *Sum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sum.Unmarshal(m, b)
}
func (m *Sum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sum.Marshal(b, m, deterministic)
}
func (dst *Sum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sum.Merge(dst, src)
}
func (m *Sum) XXX_Size() int {
	return xxx_messageInfo_Sum.Size(m)
}
func (m *Sum) XXX_DiscardUnknown() {
	xxx_messageInfo_Sum.DiscardUnknown(m)
}

var xxx_messageInfo_Sum proto.InternalMessageInfo

func (m *Sum) GetSum() int32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func init() {
	proto.RegisterType((*Point)(nil), "rpc.Point")
	proto.RegisterType((*Sum)(nil), "rpc.Sum")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rpc service

type RpcClient interface {
	Add(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Sum, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) Add(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Sum, error) {
	out := new(Sum)
	err := grpc.Invoke(ctx, "/rpc.Rpc/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service

type RpcServer interface {
	Add(context.Context, *Point) (*Sum, error)
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Rpc/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Add(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Rpc_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_9f4f7f8f14d9fd6f) }

var fileDescriptor_rpc_9f4f7f8f14d9fd6f = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0xd2, 0xe6, 0x62, 0x0d, 0xc8,
	0xcf, 0xcc, 0x2b, 0x11, 0x12, 0xe0, 0x62, 0xce, 0xcf, 0x4b, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60,
	0x0d, 0x02, 0x31, 0x41, 0x22, 0x25, 0xe5, 0xf9, 0x12, 0x4c, 0x10, 0x91, 0x92, 0xf2, 0x7c, 0x25,
	0x71, 0x2e, 0xe6, 0xe0, 0xd2, 0x5c, 0x90, 0x44, 0x71, 0x69, 0x2e, 0x4c, 0x69, 0x71, 0x69, 0xae,
	0x91, 0x0a, 0x17, 0x73, 0x50, 0x41, 0xb2, 0x90, 0x2c, 0x17, 0xb3, 0x63, 0x4a, 0x8a, 0x10, 0x97,
	0x1e, 0xc8, 0x12, 0xb0, 0xb1, 0x52, 0x1c, 0x60, 0x76, 0x70, 0x69, 0xae, 0x12, 0x43, 0x12, 0x1b,
	0xd8, 0x5e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x50, 0xf1, 0xb7, 0x84, 0x00, 0x00,
	0x00,
}
